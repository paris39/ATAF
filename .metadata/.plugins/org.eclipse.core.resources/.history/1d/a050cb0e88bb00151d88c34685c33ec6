/**
 * 
 */
package org.ataf.utils;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Map;

import com.opensymphony.xwork2.ActionContext;

/**
 * @author javier.paris
 *
 */
public class Util {

	/**
	 * Constructor
	 */
	public Util() {
	}
	
	// Estáticos
	private static final String CLASS_CAN_WRITE = "personalDataDiv";
	private static final String CLASS_READ_ONLY = "personalDataDivReadOnly";
	
	/**
	 * @param text
	 * @return Encrpyt text
	 */
	public static String cryptMD5(String text) {
		try {
			final char[] HEXADECIMALES = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
	 
			MessageDigest msgdgt = MessageDigest.getInstance("MD5");
			byte[] bytes = msgdgt.digest(text.getBytes());
			StringBuilder strCryptMD5 = new StringBuilder(2 * bytes.length);
			for (int i = 0; i < bytes.length; i++) {
				int low = (int)(bytes[i] & 0x0f);
				int high = (int)((bytes[i] & 0xf0) >> 4);
				strCryptMD5.append(HEXADECIMALES[high]);
				strCryptMD5.append(HEXADECIMALES[low]);
			}
	   		return strCryptMD5.toString();
	    } catch (NoSuchAlgorithmException e) {
    		return null;
	    }
	}
	
	public static void cleanSessionVariables() throws Exception {
		Map<String, Object> session = ActionContext.getContext().getSession();
		
		try {
			session.put("messageFlag", false); // Interruptor de mensajes a Index
			session.remove("messageBody");
			session.put("refereeReadOnly", true); // Valor para controlar los campos de sólo lectura y que puedan ser desbloqueados al Modificar el árbitro
			session.put("refereeModifyFlag", false); // Interruptor de modificación de árbitro
			session.put("refereeCssClassTextField", CLASS_READ_ONLY); // Clase de estilos para visualizar campos de sólo lectura
		} catch (Exception e) {
			
		}
		
	}
}